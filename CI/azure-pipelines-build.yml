##### DECLARATIONS #####
# Variables
parameters:
  - name: UnitTests
    displayName: Unit Tests
    type: boolean
    default: True
  - name: githubRelease
    displayName: GitHub Release
    type: boolean
    default: False
  - name: preRelease
    displayName: Pre-Release
    type: boolean
    default: True
  - name: inputNuGetVersion
    displayName: NuGet-Version
    type: string
    default: '0'
variables:
  - group: IronDrawingVersions
  
  - name: Configuration
    value: 'Release'

  - name: IronDrawingPatch
    value: $[counter(format('{0}.{1}', variables['IronDrawingMajorVersion'], variables['IronDrawingMinorVersion']), 1)]
  - name: NugetVersion
    ${{ if eq(parameters.inputNuGetVersion, '0') }}:
      ${{ if eq(parameters.preRelease, true) }}:
        value: $(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingPatch)-prerelease
      ${{ if eq(parameters.preRelease, false) }}:
        value: $(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingPatch)
    ${{ if ne(parameters.inputNuGetVersion, '0') }}:
      ${{ if eq(parameters.preRelease, true) }}:
        value: ${{ parameters.inputNuGetVersion }}-prerelease
      ${{ if eq(parameters.preRelease, false) }}:
        value: ${{ parameters.inputNuGetVersion }}
# Build Trigger
trigger:
    branches:
      include:
      - master
# Virtual Machine
pool:
  vmImage: 'windows-latest'
##### STEPS #####
stages:
## Compile
- stage: BuildDrawingLibraries
  displayName: Build IronSoftware.Drawing Libraries
  dependsOn: []
  jobs:
  - job: PrepareDrawingAssemblyVersion
    steps:
    # Prepare Assembly version
    - powershell: |
        if ("${{ parameters.inputNuGetVersion }}" -eq "0") {
          $AssemblyVersion = "$(IronDrawingMajorVersion).$(IronDrawingMinorVersion).$(IronDrawingRevisionVersion).$(IronDrawingPatch)"
        } else {
          $splitVersion = "${{ parameters.inputNuGetVersion }}".Split('.')
          $AssemblyVersion = "$($splitVersion[0]).$($splitVersion[1]).$(IronDrawingRevisionVersion).$($splitVersion[2])"
        }
        Set-Content -Path "AssemblyVersion.txt" -Value $AssemblyVersion
      displayName: 'Generate Assembly version'
    - publish: 'AssemblyVersion.txt'
      artifact: 'AssemblyVersionInfo'
  - template: job_templates/build_drawing_libraries.yml
    parameters:
      publishAssemblies: true
      buildConfiguration: $(Configuration)
      dependsOn: 'PrepareDrawingAssemblyVersion'
      prepareAssemblyVersion: true
## Test Windows
- template: stage_templates/run_tests_on_pool.yml
  parameters:
    OSPlatform: 'Windows'
    pool:
      vmImage: 'windows-latest'
    runUnitTests: ${{ parameters.UnitTests }}
## Test Linux
- template: stage_templates/run_tests_on_pool.yml
  parameters:
    OSPlatform: 'Linux'
    pool:
      vmImage: 'ubuntu-latest'
    runUnitTests: ${{ parameters.UnitTests }}
## Test MacOs
- template: stage_templates/run_tests_on_pool.yml
  parameters:
    OSPlatform: 'MacOs'
    pool:
      vmImage: 'macOS-latest'
    runUnitTests: ${{ parameters.UnitTests }}
## Push NuGet Package
- stage: DeployDrawingLibraries
  pool:
    vmImage: 'windows-latest'
  displayName: Deploy NuGet Package
  dependsOn:
    - WindowsTests
    - LinuxTests
    - MacOsTests
  jobs:
  - template: job_templates/deploy_drawing_libraries.yml
    parameters:
      NuGetVersion: $(NuGetVersion)
      gitHubRelease: ${{ parameters.gitHubRelease }}
      preRelease: ${{ parameters.preRelease }}
